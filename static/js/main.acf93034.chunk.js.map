{"version":3,"sources":["utilties.js","api.js","searchMovie.js","App.js","index.js"],"names":["objToQueryString","obj","Object","keys","map","key","join","apiKey","process","getPopularMovies","a","async","options","api_key","language","sort_by","include_adult","include_video","page","fetch","mode","response","json","responseJson","results","searchMoviebyName","name","query","SearchMovie","inputEl","useRef","useState","searchResults","setSearchResults","handleKeyDown","func","timeout","threshold","execAsap","self","this","args","arguments","delayed","apply","clearTimeout","setTimeout","debounce","searchValue","keyCode","console","log","result","title","id","ref","onKeyDown","value","target","list","App","setResult","useEffect","className","movie","style","whiteSpace","ReactDOM","render","document","getElementById"],"mappings":"6PAAMA,EAAmB,SAAAC,GAAG,OAC1BC,OAAOC,KAAKF,GACTG,KAAI,SAAAC,GAAG,gBAAOA,EAAP,YAAcJ,EAAII,OACzBC,KAAK,MCDJC,EAASC,mCAETC,EAAmB,8BAAAC,EAAAC,OAAA,uDACjBC,EAAU,CACdC,QAASN,EACTO,SAAU,QACVC,QAAS,kBACTC,eAAe,EACfC,cAAe,OACfC,KAAM,KAPe,WAAAR,EAAA,MASAS,MAAM,+CAAD,OACqBnB,EAAiBY,IAChE,CAAEQ,KAAM,UAXa,cASjBC,EATiB,kBAAAX,EAAA,MAcIW,EAASC,QAdb,cAcjBC,EAdiB,yBAehBA,EAAaC,SAfG,sCAkBnBC,EAAoB,SAAOC,GAAP,mBAAAhB,EAAAC,OAAA,uDAClBC,EAAU,CACdC,QAASN,EACToB,MAAOD,EACPZ,SAAU,QACVC,QAAS,kBACTC,eAAe,GANO,WAAAN,EAAA,MAQDS,MAAM,6CAAD,OACmBnB,EAAiBY,IAC9D,CAAEQ,KAAM,UAVc,cAQlBC,EARkB,kBAAAX,EAAA,MAaGW,EAASC,QAbZ,cAalBC,EAbkB,yBAcjBA,EAAaC,SAdI,sCCuBXI,G,MAxCK,WAClB,IAAMC,EAAUC,iBAAO,MADC,EAEkBC,mBAAS,IAF3B,mBAEjBC,EAFiB,KAEFC,EAFE,KAGlBC,EFHS,SAACC,GAA6C,IACzDC,EADkBC,EAAsC,uDAA1B,IAAKC,EAAqB,wDAG5D,OAAO,WACL,IAAMC,EAAOC,KACXC,EAAOC,UAET,SAASC,IACFL,GACHH,EAAKS,MAAML,EAAME,GAEnBL,EAAU,KAGRA,EACFS,aAAaT,GACJE,GACTH,EAAKS,MAAML,EAAME,GAGnBL,EAAUU,WAAWH,EAASN,IEjBVU,EAAS,SAAOC,EAAaC,GAApB,eAAAvC,EAAAC,OAAA,mDACb,KAAZsC,EADyB,mEAAAvC,EAAA,MAKPe,EAAkBuB,IALX,OAKvBxB,EALuB,OAM7B0B,QAAQC,IAAI,0BAA2B3B,EAAS,UAAWyB,GAC3DhB,EACET,EAAQpB,KAAI,SAAAgD,GACV,MAAO,CAAEC,MAAOD,EAAOC,MAAOC,GAAIF,EAAOE,QAThB,uCAY5B,KAEH,OACE,oCACE,2BACEC,IAAK1B,EAEL2B,UAAW,gBAAaC,EAAb,EAAGC,OAAUD,MAASR,EAAtB,EAAsBA,QAAtB,OACTf,EAAcuB,EAAOR,IAEvBU,KAAK,WAIP,8BAAUL,GAAG,UACVtB,EAAc5B,KAAI,SAAAgD,GAAM,OACvB,4BAAQK,MAAOL,EAAOC,MAAOhD,IAAK+C,EAAOE,IACtCF,EAAOC,MADV,KACmBD,EAAOE,WC0BrBM,EA3DH,WAAO,IAAD,EACY7B,mBAAS,IADrB,mBACTqB,EADS,KACDS,EADC,KAOhBC,qBAAU,WAJQ,EAAApD,EAAAC,OAAA,4DAChBkD,EADgB,WAAAnD,EAAA,MACAD,KADA,yEAMf,IAMH,OACE,yBAAKsD,UAAU,OACb,kBAAC,EAAD,MAEA,4BAPKX,EAAOhD,KAAI,SAAA4D,GAAK,OAAI,wBAAI3D,IAAK2D,EAAMV,IAAKU,EAAMX,WAsBnD,yBAAKY,MAAO,CAAEC,WAAY,cCjChCC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,W","file":"static/js/main.acf93034.chunk.js","sourcesContent":["const objToQueryString = obj =>\n  Object.keys(obj)\n    .map(key => `${key}=${obj[key]}`)\n    .join('&');\n\nconst debounce = (func, threshold = 100, execAsap = false) => {\n  let timeout;\n\n  return function debounced() {\n    const self = this,\n      args = arguments;\n\n    function delayed() {\n      if (!execAsap) {\n        func.apply(self, args);\n      }\n      timeout = null;\n    }\n\n    if (timeout) {\n      clearTimeout(timeout);\n    } else if (execAsap) {\n      func.apply(self, args);\n    }\n\n    timeout = setTimeout(delayed, threshold);\n  };\n};\n\nexport { objToQueryString, debounce };\n","import { objToQueryString } from './utilties';\n\nconst apiKey = process.env.REACT_APP_TMDB_API_KEY;\n\nconst getPopularMovies = async () => {\n  const options = {\n    api_key: apiKey,\n    language: 'en-US',\n    sort_by: 'popularity.desc',\n    include_adult: false,\n    include_video: 'trye',\n    page: '1'\n  };\n  const response = await fetch(\n    `https://api.themoviedb.org/3/discover/movie?${objToQueryString(options)}`,\n    { mode: 'cors' }\n  );\n\n  const responseJson = await response.json();\n  return responseJson.results;\n};\n\nconst searchMoviebyName = async (name) => {\n  const options = {\n    api_key: apiKey,\n    query: name,\n    language: 'en-US',\n    sort_by: 'popularity.desc',\n    include_adult: false\n  };\n  const response = await fetch(\n    `https://api.themoviedb.org/3/search/movie?${objToQueryString(options)}`,\n    { mode: 'cors' }\n  );\n\n  const responseJson = await response.json();\n  return responseJson.results;\n};\n\n// search api\n// https://api.themoviedb.org/3/search/movie?api_key=6554896d71842b7abfa6aff16e17b669&language=en-US&query=ip%20man&page=1&include_adult=false\n\nexport { getPopularMovies, searchMoviebyName };\n","import React, { useState, useRef } from 'react';\nimport { debounce } from './utilties';\nimport { searchMoviebyName } from './api';\nimport './App.scss';\n\nconst SearchMovie = () => {\n  const inputEl = useRef(null);\n  const [searchResults, setSearchResults] = useState([]);\n  const handleKeyDown = debounce(async (searchValue, keyCode) => {\n    if (keyCode === 40) {\n      return;\n    }\n    // console.log(\"value\", val);\n    const results = await searchMoviebyName(searchValue);\n    console.log('handleKeyDown, results=', results, 'keyCode', keyCode);\n    setSearchResults(\n      results.map(result => {\n        return { title: result.title, id: result.id };\n      })\n    );\n  }, 1000);\n\n  return (\n    <>\n      <input\n        ref={inputEl}\n        // https://medium.com/trabe/react-syntheticevent-reuse-889cd52981b6\n        onKeyDown={({ target: { value }, keyCode }) =>\n          handleKeyDown(value, keyCode)\n        }\n        list=\"movies\"\n      />\n\n      {/* https://stackoverflow.com/questions/15622076/making-html5-datalist-visible-when-focus-event-fires-on-input */}\n      <datalist id=\"movies\">\n        {searchResults.map(result => (\n          <option value={result.title} key={result.id}>\n            {result.title}_${result.id}\n          </option>\n        ))}\n      </datalist>\n    </>\n  );\n};\n\nexport default SearchMovie;\n","import React, { useState, useEffect } from 'react';\nimport { getPopularMovies } from './api';\nimport SearchMovie from './searchMovie';\n\nconst App = () => {\n  const [result, setResult] = useState([]);\n\n  const getMovies = async function() {\n    setResult(await getPopularMovies());\n  };\n\n  useEffect(() => {\n    getMovies();\n  }, []);\n\n  const renderMovies = () => {\n    return result.map(movie => <li key={movie.id}>{movie.title}</li>);\n  };\n\n  return (\n    <div className=\"App\">\n      <SearchMovie />\n\n      <ul>{renderMovies()}</ul>\n\n      {/*<div>*/}\n      {/*  <small>*/}\n      {/*    You are running this application in <b>{process.env.NODE_ENV}</b>{\" \"}*/}\n      {/*    mode.*/}\n      {/*  </small>*/}\n      {/*  <small>*/}\n      {/*    REACT_APP_TMDB_API_KEY={process.env.REACT_APP_TMDB_API_KEY}*/}\n      {/*  </small>*/}\n      {/*</div>*/}\n\n      {/*https://www.themoviedb.org/documentation/api*/}\n      {/*https://developers.themoviedb.org/3/search/search-movies*/}\n\n      <pre style={{ whiteSpace: 'normal' }}>\n        {/*We would like you to build a small web app for finding information about*/}\n        {/*all of your favorite movies using the The Movie Database API. Minimum*/}\n        {/*Feature Set When first loaded, the user should see a list of the most*/}\n        {/*popular movies and a search bar. A user should be able to search for a*/}\n        {/*movie by title in the search bar, and the matching results should show*/}\n        {/*up in the list of movies. A user can click on a movie in the list and be*/}\n        {/*taken to a page that displays more details for the movie (title, movie*/}\n        {/*poster, release date, cast, synopsis, etc) Technical Requirements Using*/}\n        {/*Node.js, create a backend application that accepts requests to power the*/}\n        {/*features above. This app should query the Movie DB API and return the*/}\n        {/*results to the user. Compose your UI using React or Vue. Please include*/}\n        {/*a README.md with step-by-step instructions for running the app. Be*/}\n        {/*careful to ensure there are not local dependencies that have been*/}\n        {/*overlooked in the readme. Extra Points (optional) Add more features that*/}\n        {/*you think are cool! Some ideas: Add filtering by genre Show related*/}\n        {/*movies Add a page for individual actor details Add a caching layer for*/}\n        {/*your requests to the 3rd party API. This not a design exercise, but UX*/}\n        {/*polish that demonstrates your mastery of your frontend tool set is*/}\n        {/*encouraged. Add unit testing for your API.*/}\n      </pre>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(<App/>, document.getElementById('root'))\n"],"sourceRoot":""}