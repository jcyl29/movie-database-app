{"version":3,"sources":["utilties.js","api.js","SearchMovie.js","TmdbConfigContext.js","InfoDialog.js","MovieItem.js","MovieList.js","Genres.js","App.js","index.js"],"names":["objToQueryString","obj","Object","keys","map","key","join","parseSizeString","str","parseInt","replace","apiKey","process","getCachedData","url","fetchOptions","a","async","result","cache","get","fetch","response","json","put","parseResults","mode","targetKey","getTMDBconfig","options","api_key","getPopularMovies","opts","language","sort_by","include_adult","include_video","page","undefined","getGenres","searchMoviebyName","name","query","getMovieCast","movieId","limit","results","slice","sort","b","cast_id","arrowKeys","leftArrow","upArrow","rightArrow","downArrow","SearchMovie","setResults","setRanSearch","handleKeyUp","func","timeout","threshold","execAsap","self","this","args","arguments","delayed","apply","clearTimeout","setTimeout","debounce","searchValue","keyCode","cleanedSearchValue","trim","values","some","kc","movies","className","onKeyUp","value","target","placeholder","TmdbConfigContext","createContext","TmdbConfigProvider","config","children","context","Provider","defaultProps","Consumer","InfoDialog","show","setShowDialog","selectedMovieId","movieInfoDialog","useRef","useState","castData","setCastData","useContext","useEffect","dialogPolyfill","registerDialog","current","addEventListener","hasAttribute","showModal","data","getCast","closeModal","close","id","ref","movie","filter","poster_path","secure_base_url","images","halfVwImageSize","sizes","clientWidth","i","length","parsedSize","Math","abs","getHalfVwImage","poster_sizes","document","documentElement","title","type","data-dismiss","aria-hidden","onClick","width","alt","src","overview","dateString","locale","weekday","year","month","day","timeZone","Date","toLocaleDateString","getLocaleDateString","release_date","cast","credit_id","character","showMovieInfo","MovieItem","handleMovieItemClick","widthViewportMap","w500","w300","w185","w154","data-movie-id","entries","imgWidth","viewPortWidth","media","srcSet","MovieList","moviesData","setSelectedMovie","role","Genres","ranSearch","updateAfterGenreSelect","showAll","setShowAll","showAllBtnClasses","classnames","containerClasses","genre","index","genreClassNames","onChange","checked","htmlFor","App","setMovies","selectedMovie","genres","setGenres","selectedGenres","setSelectedGenres","showDialog","tmdbConfig","setTmdbConfig","withGenreList","reduce","acc","genreId","push","with_genres","getMovies","genresData","g1","g2","getGenreList","subheaderText","resetSelectedMovie","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.9cc010b5.chunk.js","sourcesContent":["const objToQueryString = obj =>\n  Object.keys(obj)\n    .map(key => `${key}=${obj[key]}`)\n    .join('&');\n\nconst debounce = (func, threshold = 100, execAsap = false) => {\n  let timeout;\n\n  return function debounced() {\n    const self = this,\n      args = arguments;\n\n    function delayed() {\n      if (!execAsap) {\n        func.apply(self, args);\n      }\n      timeout = null;\n    }\n\n    if (timeout) {\n      clearTimeout(timeout);\n    } else if (execAsap) {\n      func.apply(self, args);\n    }\n\n    timeout = setTimeout(delayed, threshold);\n  };\n};\n\nconst parseSizeString = str => parseInt(str.replace('w', ''), 10);\n\n// find the images that is closest to half the size of viewport width\nconst getHalfVwImage = (sizes, clientWidth) => {\n  const threshold = 210;\n  const maxWidth = 500;\n\n  // using a a regular for loop because i need to be able to break out\n  // when i find a match, and array.forEach doesn't do that\n  for (let i = 0; i < sizes.length; i++) {\n    const parsedSize = parseSizeString(sizes[i]);\n    if (Math.abs(clientWidth / 2 - parsedSize) < threshold) {\n      if (parsedSize > maxWidth) {\n        return `w${maxWidth}`;\n      }\n\n      return sizes[i];\n    }\n  }\n\n  // return the smallest if no match found\n  return sizes[0];\n};\n\nconst getLocaleDateString = (\n  dateString,\n  locale = 'en-US',\n  options = {\n    weekday: 'long',\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric',\n    timeZone: 'UTC'\n  }\n) => new Date(dateString).toLocaleDateString(locale, options);\n\nexport {\n  objToQueryString,\n  debounce,\n  getHalfVwImage,\n  parseSizeString,\n  getLocaleDateString\n};\n","import { objToQueryString } from './utilties';\nimport cache from 'memory-cache';\n\nconst apiKey = process.env.REACT_APP_TMDB_API_KEY;\n\nconst getCachedData = async (url, fetchOptions) => {\n  const key = `__cache__${url}`;\n  let result = cache.get(key);\n\n  if (!result) {\n    const response = await fetch(url, fetchOptions);\n    result = response.json();\n    cache.put(key, result);\n  }\n\n  return result;\n};\n\nconst parseResults = async (\n  url,\n  fetchOptions = { mode: 'cors' },\n  targetKey\n) => {\n  let response;\n  try {\n    response = await getCachedData(url, fetchOptions);\n  } catch (e) {\n    return [];\n  }\n\n  return targetKey ? response[targetKey] : response;\n};\n\n// https://developers.themoviedb.org/3/getting-started/images\nconst getTMDBconfig = async () => {\n  const options = {\n    api_key: apiKey\n  };\n\n  return parseResults(\n    `https://api.themoviedb.org/3/configuration?${objToQueryString(options)}`\n  );\n};\n\nconst getPopularMovies = async (opts = {}) => {\n  const options = {\n    api_key: apiKey,\n    language: opts.language || 'en-US',\n    sort_by: opts.sort_by || 'popularity.desc',\n    include_adult: opts.include_adult || false,\n    include_video: opts.include_video || true,\n    page: opts.page || '1',\n    ...opts\n  };\n\n  return parseResults(\n    `https://api.themoviedb.org/3/discover/movie?${objToQueryString(options)}`,\n    undefined,\n    'results'\n  );\n};\n\n\nconst getGenres = async () => {\n  const options = {\n    api_key: apiKey\n  };\n\n  return parseResults(\n    `https://api.themoviedb.org/3/genre/movie/list?${objToQueryString(options)}`,\n    undefined,\n    'genres'\n  );\n};\n\nconst searchMoviebyName = async (name, opts = {}) => {\n  const options = {\n    api_key: apiKey,\n    query: name,\n    language: opts.language || 'en-US',\n    sort_by: opts.sort_by || 'popularity.desc',\n    include_adult: opts.include_adult || false,\n    ...opts\n  };\n\n  return parseResults(\n    `https://api.themoviedb.org/3/search/movie?${objToQueryString(options)}`,\n    undefined,\n    'results'\n  );\n};\n\nconst getMovieCast = async (movieId, limit = 5) => {\n  const options = {\n    api_key: apiKey\n  };\n\n  const results = await parseResults(\n    `https://api.themoviedb.org/3/movie/${movieId}/credits?${objToQueryString(\n      options\n    )}`,\n    undefined,\n    'cast'\n  );\n\n  return results.slice(0, limit).sort((a, b) => a.cast_id - b.cast_id);\n};\n\nexport { getTMDBconfig, getPopularMovies, searchMoviebyName, getMovieCast, getGenres };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { debounce } from './utilties';\nimport { searchMoviebyName } from './api';\n\nconst arrowKeys = {\n  leftArrow: 37,\n  upArrow: 38,\n  rightArrow: 39,\n  downArrow: 40\n}\n\nconst SearchMovie = ({ setResults, setRanSearch }) => {\n  const handleKeyUp = debounce(async (searchValue, keyCode) => {\n    const cleanedSearchValue = searchValue.trim();\n    if (Object.values(arrowKeys).some(kc => kc === keyCode)) {\n      return;\n    }\n\n    if (!cleanedSearchValue) {\n      return;\n    }\n\n    const movies = await searchMoviebyName(searchValue);\n    setResults(movies);\n    setRanSearch(true)\n  }, 1000);\n\n  return (\n    <input className='form-control'\n      // https://medium.com/trabe/react-syntheticevent-reuse-889cd52981b6\n      onKeyUp={({ target: { value }, keyCode }) =>\n        handleKeyUp(value, keyCode)\n      }\n      placeholder=\"Search for a movie\"\n    />\n  );\n};\n\nSearchMovie.propTypes = {\n  setResults: PropTypes.func.isRequired,\n  setRanSearch: PropTypes.func.isRequired\n};\n\nexport default SearchMovie;\n","import React, { createContext } from 'react';\nimport { PropTypes } from 'prop-types';\n\nconst TmdbConfigContext = createContext();\n\nexport const TmdbConfigProvider = ({ config, children }) => {\n  const context = {\n    config\n  };\n\n  return (\n    <TmdbConfigContext.Provider value={context}>\n      {children}\n    </TmdbConfigContext.Provider>\n  );\n};\nTmdbConfigProvider.defaultProps = {\n  children: null,\n  config: null\n};\nTmdbConfigProvider.propTypes = {\n  config: PropTypes.shape({}),\n  children: PropTypes.node\n};\n\nexport const TmdbConfigConsumer = TmdbConfigContext.Consumer;\nexport default TmdbConfigContext;\n","import React, { useState, useEffect, useRef, useContext } from 'react';\nimport dialogPolyfill from 'dialog-polyfill';\n\nimport { getMovieCast } from './api';\nimport {\n  getHalfVwImage,\n  getLocaleDateString,\n  parseSizeString\n} from './utilties';\nimport PropTypes from 'prop-types';\nimport TmdbConfigContext from './TmdbConfigContext';\nimport './info-dialog.scss';\n\nconst InfoDialog = ({ show, setShowDialog, selectedMovieId, movies }) => {\n  const movieInfoDialog = useRef(null);\n  const [castData, setCastData] = useState([]);\n  const { config } = useContext(TmdbConfigContext);\n\n  const getCast = async movieId => {\n    const data = await getMovieCast(movieId);\n    setCastData(data);\n  };\n\n  useEffect(() => {\n    dialogPolyfill.registerDialog(movieInfoDialog.current);\n    movieInfoDialog.current.addEventListener('close', () => {\n      // need to update the parent container state representation of this dialog.\n      // otherwise this will cause a bug where clicking the same movie after closing\n      // dialog won't open the dialog\n      setShowDialog(false);\n    });\n  }, [setShowDialog]);\n\n  // this check is needed in Firefox that is using the polyfill\n  if (show && movieInfoDialog.current && !movieInfoDialog.current.hasAttribute('open')) {\n    movieInfoDialog.current.showModal();\n    getCast(selectedMovieId);\n  }\n\n  const showMovieInfo = movieId => {\n    const movie = movies.filter(movie => movie.id === movieId)[0];\n\n    if (!movie) {\n      return;\n    }\n\n    const { poster_path } = movie;\n    const secure_base_url = config.images.secure_base_url;\n\n    const halfVwImageSize = getHalfVwImage(\n      config.images.poster_sizes,\n      document.documentElement.clientWidth\n    );\n\n    return (\n      <div>\n        <div className=\"modal-header\">\n          <h3>{movie.title}</h3>\n          <button\n            type=\"button\"\n            className=\"close\"\n            data-dismiss=\"alert\"\n            aria-hidden=\"true\"\n            onClick={closeModal}\n          >\n            ×\n          </button>\n        </div>\n        <div className=\"modal-body clearfix\">\n          <img\n            width={parseSizeString(halfVwImageSize)}\n            alt={movie.title}\n            src={`${secure_base_url}${halfVwImageSize}${poster_path}`}\n            className=\"modal-image float-right\"\n          />\n          <h5>Synopsis</h5>\n          <p className=\"small\">{movie.overview || 'No synopsis available'}</p>\n          <h5>Release date</h5>\n          <p className=\"small\"> {getLocaleDateString(movie.release_date)}</p>\n          <h5>Starring:</h5>\n          {castData.length === 0 && <p className='small'>No cast available</p>}\n          <ul className=\"list-unstyled\">\n            {castData.map(cast => {\n              return (\n                <li className=\"small\" key={`${cast.id}_${cast.credit_id}`}>\n                  {cast.name} as {cast.character || 'unspecified'}\n                </li>\n              );\n            })}\n          </ul>\n        </div>\n        <div className=\"modal-footer\">\n          <button\n            className=\"btn\"\n            data-dismiss=\"alert\"\n            aria-hidden=\"true\"\n            onClick={closeModal}\n          >\n            Close\n          </button>\n        </div>\n      </div>\n    );\n  };\n\n  const closeModal = () => {\n    movieInfoDialog.current.close();\n  };\n\n  return (\n    <dialog id='info-dialog' ref={movieInfoDialog}>{showMovieInfo(selectedMovieId)}</dialog>\n  );\n};\n\nInfoDialog.propTypes = {\n  show: PropTypes.bool.isRequired,\n  setShowDialog: PropTypes.func.isRequired,\n  selectedMovieId: PropTypes.number.isRequired,\n  movies: PropTypes.arrayOf(PropTypes.shape({})).isRequired\n};\n\nexport default InfoDialog;\n","import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport TmdbConfigContext from './TmdbConfigContext';\nimport './movie-item.scss';\n\nconst MovieItem = ({ data, handleMovieItemClick }) => {\n  // warning: config can be null while waiting to fetch config data\n  const { config } = useContext(TmdbConfigContext);\n  const { poster_path } = data;\n  const secure_base_url = config && config.images.secure_base_url;\n\n  const widthViewportMap = {\n    w500: '1200px',\n    w300: '992px',\n    w185: '768px',\n    w154: '402px'\n  };\n\n  const renderSources = () =>\n    Object.entries(widthViewportMap).map(([imgWidth, viewPortWidth]) => {\n      return (\n        <source\n          key={`${imgWidth}_${viewPortWidth}`}\n          media={`(min-width: ${viewPortWidth}`}\n          srcSet={`${secure_base_url}${imgWidth}${poster_path}`}\n        />\n      );\n    });\n\n  return (\n    <li\n      className=\"movie-item card border-primary\"\n      key={data.id}\n      data-movie-id={data.id}\n      onClick={() => handleMovieItemClick(data.id)}\n    >\n      <div className=\"card-body\">\n        {config && (\n          <picture>\n            {renderSources()}\n            <img\n              src={`${secure_base_url}w154${poster_path}`}\n              alt={`${data.title}`}\n              width=\"100%\"\n              // setting a width=100% on this fallback image will also properly constrain the <source> elements before it\n            />\n          </picture>\n        )}\n        <span className=\"d-block mt-2 small text-primary\">{data.title}</span>\n        <small className='text-info'>{data.release_date}</small>\n      </div>\n    </li>\n  );\n};\n\nMovieItem.propTypes = {\n  data: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    id: PropTypes.number.isRequired,\n    poster_path: PropTypes.string.isRequired,\n    release_date: PropTypes.string.isRequired\n  }).isRequired,\n  handleMovieItemClick: PropTypes.func.isRequired\n};\n\nexport default MovieItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport MovieItem from './MovieItem';\nimport './movie-list.scss';\n\nconst MovieList = ({ moviesData, setSelectedMovie, setShowDialog }) => {\n  const handleMovieItemClick = movieId => {\n    setSelectedMovie(movieId);\n    setShowDialog(true);\n  };\n\n  const renderMovies = () => {\n    return moviesData.map(movie => (\n      <MovieItem\n        key={movie.id}\n        handleMovieItemClick={handleMovieItemClick}\n        data={movie}\n      />\n    ));\n  };\n\n  if (moviesData.length === 0) {\n    return (\n      <div className=\"alert alert-primary show fade\" role=\"alert\">\n        No results found.\n      </div>\n    );\n  }\n\n  return <ul className=\"movie-list list-unstyled\">{renderMovies()}</ul>;\n};\n\nMovieList.propTypes = {\n  moviesData: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n  setShowDialog: PropTypes.func.isRequired,\n  setSelectedMovie: PropTypes.func.isRequired\n};\n\nexport default MovieList;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport './genres.scss';\n\nconst Genres = ({ data, ranSearch, updateAfterGenreSelect }) => {\n  const [showAll, setShowAll] = useState(false);\n  const initialList = 5;\n\n  if (ranSearch) {\n    return null;\n  }\n\n  const showAllBtnClasses = classnames('btn btn-info btn-sm', {\n    'd-none': showAll\n  });\n\n  const containerClasses = classnames('bg-light ml-4 p-2 mb-3', {\n    'pb-2': !showAll\n  });\n\n  return (\n    <div className={containerClasses}>\n      <h5>Filter by Genre:</h5>\n      <ul className=\"genre-list list-unstyled\">\n        {data.map((genre, index) => {\n          const genreClassNames = classnames('custom-control custom-checkbox', {\n            'd-none': index > initialList && !showAll\n          });\n          return (\n            <li\n              className={genreClassNames}\n              key={`genre_${genre.id}_${genre.name}`}\n            >\n              <input\n                type=\"checkbox\"\n                className=\"custom-control-input\"\n                id={`genre-${genre.id}`}\n                onChange={({ target: { checked } }) =>\n                  updateAfterGenreSelect(checked, genre.id)\n                }\n              />\n              <label\n                className=\"custom-control-label\"\n                htmlFor={`genre-${genre.id}`}\n              >\n                {genre.name}\n              </label>\n            </li>\n          );\n        })}\n      </ul>\n      <button onClick={() => setShowAll(true)} className={showAllBtnClasses}>\n        Show all\n      </button>\n    </div>\n  );\n};\n\nGenres.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      name: PropTypes.string.isRequired\n    })\n  ).isRequired,\n  ranSearch: PropTypes.bool.isRequired,\n  updateAfterGenreSelect: PropTypes.func.isRequired\n};\n\nexport default Genres;\n","import React, { useState, useEffect } from 'react';\n\nimport { getGenres, getPopularMovies, getTMDBconfig } from './api';\nimport SearchMovie from './SearchMovie';\nimport './App.scss';\nimport './greyson-theme.css';\nimport InfoDialog from './InfoDialog';\nimport MovieList from './MovieList';\nimport { TmdbConfigProvider } from './TmdbConfigContext';\nimport Genres from './Genres';\n\nconst App = () => {\n  const [movies, setMovies] = useState([]);\n  const [selectedMovie, setSelectedMovie] = useState(-1);\n\n  const [genres, setGenres] = useState([]);\n  const [selectedGenres, setSelectedGenres] = useState({});\n\n  const [showDialog, setShowDialog] = useState(false);\n  const [ranSearch, setRanSearch] = useState(false);\n\n  const [tmdbConfig, setTmdbConfig] = useState(null);\n\n  const getMovies = async () => {\n    const withGenreList = Object.entries(selectedGenres)\n      .reduce((acc, [genreId, checked]) => {\n        if (checked) {\n          acc.push(genreId);\n        }\n\n        return acc;\n      }, [])\n      .join(',');\n\n    const results = await getPopularMovies({ with_genres: withGenreList });\n    setMovies(results);\n  };\n\n  const getConfig = async () => {\n    setTmdbConfig(await getTMDBconfig());\n  };\n\n  const getGenreList = async () => {\n    const genresData = await getGenres();\n    setGenres(genresData.sort((g1, g2) => g1.id - g2.id));\n  };\n\n  const updateAfterGenreSelect = (checked, genreId) => {\n    setSelectedGenres(genres => {\n      genres[genreId] = checked;\n\n      // when dealing with objects/arrays in useState, must make copy of a old state\n      // https://daveceddia.com/usestate-hook-examples/#example-usestate-with-an-object-multiple-values-sorta\n      return { ...genres };\n    });\n  };\n\n  useEffect(() => {\n    getConfig();\n    getMovies();\n    getGenreList();\n  }, [selectedGenres]);\n\n  const subheaderText = ranSearch ? 'Search Results' : 'Popular Movies';\n\n  return (\n    <TmdbConfigProvider config={tmdbConfig}>\n      <div className=\"App container\">\n        <header>\n          <h1 className=\"text-light\">Moviely</h1>\n        </header>\n        <SearchMovie setResults={setMovies} setRanSearch={setRanSearch} />\n        <h3 className=\"text-light mt-3 mb-3\">{subheaderText}</h3>\n        <Genres\n          data={genres}\n          ranSearch={ranSearch}\n          updateAfterGenreSelect={updateAfterGenreSelect}\n        />\n        <MovieList\n          moviesData={movies}\n          setSelectedMovie={setSelectedMovie}\n          setShowDialog={setShowDialog}\n          tmdbConfig={tmdbConfig}\n        />\n\n        <InfoDialog\n          show={showDialog}\n          movies={movies}\n          selectedMovieId={selectedMovie}\n          setShowDialog={setShowDialog}\n          resetSelectedMovie={() => setShowDialog(false)}\n        />\n      </div>\n    </TmdbConfigProvider>\n  );\n};\n\nexport default App;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(<App/>, document.getElementById('root'))\n"],"sourceRoot":""}